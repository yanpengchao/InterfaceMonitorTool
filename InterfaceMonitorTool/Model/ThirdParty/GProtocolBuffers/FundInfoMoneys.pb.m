// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FundInfoMoneys.pb.h"

@implementation FundInfoMoneysRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FundInfoMoneysRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [MoneysRoot registerAllExtensions:registry];
    [CommonRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FundInfoMoneys ()
@property (retain) Common* common;
@property int64_t serverTime;
@property (retain) NSMutableArray* mutableMoneysList;
@property int64_t dateVersion;
@end

@implementation FundInfoMoneys

- (BOOL) hasCommon {
  return !!hasCommon_;
}
- (void) setHasCommon:(BOOL) value {
  hasCommon_ = !!value;
}
@synthesize common;
- (BOOL) hasServerTime {
  return !!hasServerTime_;
}
- (void) setHasServerTime:(BOOL) value {
  hasServerTime_ = !!value;
}
@synthesize serverTime;
@synthesize mutableMoneysList;
- (BOOL) hasDateVersion {
  return !!hasDateVersion_;
}
- (void) setHasDateVersion:(BOOL) value {
  hasDateVersion_ = !!value;
}
@synthesize dateVersion;
- (void) dealloc {
  self.common = nil;
  self.mutableMoneysList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.common = [Common defaultInstance];
    self.serverTime = 0L;
    self.dateVersion = 0L;
  }
  return self;
}
static FundInfoMoneys* defaultFundInfoMoneysInstance = nil;
+ (void) initialize {
  if (self == [FundInfoMoneys class]) {
    defaultFundInfoMoneysInstance = [[FundInfoMoneys alloc] init];
  }
}
+ (FundInfoMoneys*) defaultInstance {
  return defaultFundInfoMoneysInstance;
}
- (FundInfoMoneys*) defaultInstance {
  return defaultFundInfoMoneysInstance;
}
- (NSArray*) moneysList {
  return mutableMoneysList;
}
- (Moneys*) moneysAtIndex:(int32_t) index {
  id value = [mutableMoneysList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasServerTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommon) {
    [output writeMessage:1 value:self.common];
  }
  if (self.hasServerTime) {
    [output writeFixed64:2 value:self.serverTime];
  }
  for (Moneys* element in self.moneysList) {
    [output writeMessage:3 value:element];
  }
  if (self.hasDateVersion) {
    [output writeFixed64:4 value:self.dateVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCommon) {
    size += computeMessageSize(1, self.common);
  }
  if (self.hasServerTime) {
    size += computeFixed64Size(2, self.serverTime);
  }
  for (Moneys* element in self.moneysList) {
    size += computeMessageSize(3, element);
  }
  if (self.hasDateVersion) {
    size += computeFixed64Size(4, self.dateVersion);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FundInfoMoneys*) parseFromData:(NSData*) data {
  return (FundInfoMoneys*)[[[FundInfoMoneys builder] mergeFromData:data] build];
}
+ (FundInfoMoneys*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundInfoMoneys*)[[[FundInfoMoneys builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FundInfoMoneys*) parseFromInputStream:(NSInputStream*) input {
  return (FundInfoMoneys*)[[[FundInfoMoneys builder] mergeFromInputStream:input] build];
}
+ (FundInfoMoneys*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundInfoMoneys*)[[[FundInfoMoneys builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FundInfoMoneys*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FundInfoMoneys*)[[[FundInfoMoneys builder] mergeFromCodedInputStream:input] build];
}
+ (FundInfoMoneys*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundInfoMoneys*)[[[FundInfoMoneys builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FundInfoMoneys_Builder*) builder {
  return [[[FundInfoMoneys_Builder alloc] init] autorelease];
}
+ (FundInfoMoneys_Builder*) builderWithPrototype:(FundInfoMoneys*) prototype {
  return [[FundInfoMoneys builder] mergeFrom:prototype];
}
- (FundInfoMoneys_Builder*) builder {
  return [FundInfoMoneys builder];
}
@end

@interface FundInfoMoneys_Builder()
@property (retain) FundInfoMoneys* result;
@end

@implementation FundInfoMoneys_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FundInfoMoneys alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FundInfoMoneys_Builder*) clear {
  self.result = [[[FundInfoMoneys alloc] init] autorelease];
  return self;
}
- (FundInfoMoneys_Builder*) clone {
  return [FundInfoMoneys builderWithPrototype:result];
}
- (FundInfoMoneys*) defaultInstance {
  return [FundInfoMoneys defaultInstance];
}
- (FundInfoMoneys*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FundInfoMoneys*) buildPartial {
  FundInfoMoneys* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FundInfoMoneys_Builder*) mergeFrom:(FundInfoMoneys*) other {
  if (other == [FundInfoMoneys defaultInstance]) {
    return self;
  }
  if (other.hasCommon) {
    [self mergeCommon:other.common];
  }
  if (other.hasServerTime) {
    [self setServerTime:other.serverTime];
  }
  if (other.mutableMoneysList.count > 0) {
    if (result.mutableMoneysList == nil) {
      result.mutableMoneysList = [NSMutableArray array];
    }
    [result.mutableMoneysList addObjectsFromArray:other.mutableMoneysList];
  }
  if (other.hasDateVersion) {
    [self setDateVersion:other.dateVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FundInfoMoneys_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FundInfoMoneys_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Common_Builder* subBuilder = [Common builder];
        if (self.hasCommon) {
          [subBuilder mergeFrom:self.common];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCommon:[subBuilder buildPartial]];
        break;
      }
      case 17: {
        [self setServerTime:[input readFixed64]];
        break;
      }
      case 26: {
        Moneys_Builder* subBuilder = [Moneys builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMoneys:[subBuilder buildPartial]];
        break;
      }
      case 33: {
        [self setDateVersion:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasCommon {
  return result.hasCommon;
}
- (Common*) common {
  return result.common;
}
- (FundInfoMoneys_Builder*) setCommon:(Common*) value {
  result.hasCommon = YES;
  result.common = value;
  return self;
}
- (FundInfoMoneys_Builder*) setCommonBuilder:(Common_Builder*) builderForValue {
  return [self setCommon:[builderForValue build]];
}
- (FundInfoMoneys_Builder*) mergeCommon:(Common*) value {
  if (result.hasCommon &&
      result.common != [Common defaultInstance]) {
    result.common =
      [[[Common builderWithPrototype:result.common] mergeFrom:value] buildPartial];
  } else {
    result.common = value;
  }
  result.hasCommon = YES;
  return self;
}
- (FundInfoMoneys_Builder*) clearCommon {
  result.hasCommon = NO;
  result.common = [Common defaultInstance];
  return self;
}
- (BOOL) hasServerTime {
  return result.hasServerTime;
}
- (int64_t) serverTime {
  return result.serverTime;
}
- (FundInfoMoneys_Builder*) setServerTime:(int64_t) value {
  result.hasServerTime = YES;
  result.serverTime = value;
  return self;
}
- (FundInfoMoneys_Builder*) clearServerTime {
  result.hasServerTime = NO;
  result.serverTime = 0L;
  return self;
}
- (NSArray*) moneysList {
  if (result.mutableMoneysList == nil) { return [NSArray array]; }
  return result.mutableMoneysList;
}
- (Moneys*) moneysAtIndex:(int32_t) index {
  return [result moneysAtIndex:index];
}
- (FundInfoMoneys_Builder*) replaceMoneysAtIndex:(int32_t) index with:(Moneys*) value {
  [result.mutableMoneysList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FundInfoMoneys_Builder*) addAllMoneys:(NSArray*) values {
  if (result.mutableMoneysList == nil) {
    result.mutableMoneysList = [NSMutableArray array];
  }
  [result.mutableMoneysList addObjectsFromArray:values];
  return self;
}
- (FundInfoMoneys_Builder*) clearMoneysList {
  result.mutableMoneysList = nil;
  return self;
}
- (FundInfoMoneys_Builder*) addMoneys:(Moneys*) value {
  if (result.mutableMoneysList == nil) {
    result.mutableMoneysList = [NSMutableArray array];
  }
  [result.mutableMoneysList addObject:value];
  return self;
}
- (BOOL) hasDateVersion {
  return result.hasDateVersion;
}
- (int64_t) dateVersion {
  return result.dateVersion;
}
- (FundInfoMoneys_Builder*) setDateVersion:(int64_t) value {
  result.hasDateVersion = YES;
  result.dateVersion = value;
  return self;
}
- (FundInfoMoneys_Builder*) clearDateVersion {
  result.hasDateVersion = NO;
  result.dateVersion = 0L;
  return self;
}
@end

