// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Fundfixed.pb.h"

@implementation FundfixedRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FundfixedRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [CommonRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Fundfixed ()
@property (retain) NSString* code;
@property (retain) NSString* dthb1N;
@property (retain) NSString* dthb2N;
@property (retain) NSString* dthb3N;
@property (retain) NSString* dthb4N;
@property (retain) NSString* dthb5N;
@property (retain) NSString* jjjz;
@property (retain) NSString* ljjz;
@property (retain) NSString* jzrq;
@end

@implementation Fundfixed

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasDthb1N {
  return !!hasDthb1N_;
}
- (void) setHasDthb1N:(BOOL) value {
  hasDthb1N_ = !!value;
}
@synthesize dthb1N;
- (BOOL) hasDthb2N {
  return !!hasDthb2N_;
}
- (void) setHasDthb2N:(BOOL) value {
  hasDthb2N_ = !!value;
}
@synthesize dthb2N;
- (BOOL) hasDthb3N {
  return !!hasDthb3N_;
}
- (void) setHasDthb3N:(BOOL) value {
  hasDthb3N_ = !!value;
}
@synthesize dthb3N;
- (BOOL) hasDthb4N {
  return !!hasDthb4N_;
}
- (void) setHasDthb4N:(BOOL) value {
  hasDthb4N_ = !!value;
}
@synthesize dthb4N;
- (BOOL) hasDthb5N {
  return !!hasDthb5N_;
}
- (void) setHasDthb5N:(BOOL) value {
  hasDthb5N_ = !!value;
}
@synthesize dthb5N;
- (BOOL) hasJjjz {
  return !!hasJjjz_;
}
- (void) setHasJjjz:(BOOL) value {
  hasJjjz_ = !!value;
}
@synthesize jjjz;
- (BOOL) hasLjjz {
  return !!hasLjjz_;
}
- (void) setHasLjjz:(BOOL) value {
  hasLjjz_ = !!value;
}
@synthesize ljjz;
- (BOOL) hasJzrq {
  return !!hasJzrq_;
}
- (void) setHasJzrq:(BOOL) value {
  hasJzrq_ = !!value;
}
@synthesize jzrq;
- (void) dealloc {
  self.code = nil;
  self.dthb1N = nil;
  self.dthb2N = nil;
  self.dthb3N = nil;
  self.dthb4N = nil;
  self.dthb5N = nil;
  self.jjjz = nil;
  self.ljjz = nil;
  self.jzrq = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.code = @"";
    self.dthb1N = @"";
    self.dthb2N = @"";
    self.dthb3N = @"";
    self.dthb4N = @"";
    self.dthb5N = @"";
    self.jjjz = @"";
    self.ljjz = @"";
    self.jzrq = @"";
  }
  return self;
}
static Fundfixed* defaultFundfixedInstance = nil;
+ (void) initialize {
  if (self == [Fundfixed class]) {
    defaultFundfixedInstance = [[Fundfixed alloc] init];
  }
}
+ (Fundfixed*) defaultInstance {
  return defaultFundfixedInstance;
}
- (Fundfixed*) defaultInstance {
  return defaultFundfixedInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:1 value:self.code];
  }
  if (self.hasDthb1N) {
    [output writeString:2 value:self.dthb1N];
  }
  if (self.hasDthb2N) {
    [output writeString:3 value:self.dthb2N];
  }
  if (self.hasDthb3N) {
    [output writeString:4 value:self.dthb3N];
  }
  if (self.hasDthb4N) {
    [output writeString:5 value:self.dthb4N];
  }
  if (self.hasDthb5N) {
    [output writeString:6 value:self.dthb5N];
  }
  if (self.hasJjjz) {
    [output writeString:7 value:self.jjjz];
  }
  if (self.hasLjjz) {
    [output writeString:8 value:self.ljjz];
  }
  if (self.hasJzrq) {
    [output writeString:9 value:self.jzrq];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeStringSize(1, self.code);
  }
  if (self.hasDthb1N) {
    size += computeStringSize(2, self.dthb1N);
  }
  if (self.hasDthb2N) {
    size += computeStringSize(3, self.dthb2N);
  }
  if (self.hasDthb3N) {
    size += computeStringSize(4, self.dthb3N);
  }
  if (self.hasDthb4N) {
    size += computeStringSize(5, self.dthb4N);
  }
  if (self.hasDthb5N) {
    size += computeStringSize(6, self.dthb5N);
  }
  if (self.hasJjjz) {
    size += computeStringSize(7, self.jjjz);
  }
  if (self.hasLjjz) {
    size += computeStringSize(8, self.ljjz);
  }
  if (self.hasJzrq) {
    size += computeStringSize(9, self.jzrq);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Fundfixed*) parseFromData:(NSData*) data {
  return (Fundfixed*)[[[Fundfixed builder] mergeFromData:data] build];
}
+ (Fundfixed*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Fundfixed*)[[[Fundfixed builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Fundfixed*) parseFromInputStream:(NSInputStream*) input {
  return (Fundfixed*)[[[Fundfixed builder] mergeFromInputStream:input] build];
}
+ (Fundfixed*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Fundfixed*)[[[Fundfixed builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Fundfixed*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Fundfixed*)[[[Fundfixed builder] mergeFromCodedInputStream:input] build];
}
+ (Fundfixed*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Fundfixed*)[[[Fundfixed builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Fundfixed_Builder*) builder {
  return [[[Fundfixed_Builder alloc] init] autorelease];
}
+ (Fundfixed_Builder*) builderWithPrototype:(Fundfixed*) prototype {
  return [[Fundfixed builder] mergeFrom:prototype];
}
- (Fundfixed_Builder*) builder {
  return [Fundfixed builder];
}
@end

@interface Fundfixed_Builder()
@property (retain) Fundfixed* result;
@end

@implementation Fundfixed_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Fundfixed alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Fundfixed_Builder*) clear {
  self.result = [[[Fundfixed alloc] init] autorelease];
  return self;
}
- (Fundfixed_Builder*) clone {
  return [Fundfixed builderWithPrototype:result];
}
- (Fundfixed*) defaultInstance {
  return [Fundfixed defaultInstance];
}
- (Fundfixed*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Fundfixed*) buildPartial {
  Fundfixed* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Fundfixed_Builder*) mergeFrom:(Fundfixed*) other {
  if (other == [Fundfixed defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasDthb1N) {
    [self setDthb1N:other.dthb1N];
  }
  if (other.hasDthb2N) {
    [self setDthb2N:other.dthb2N];
  }
  if (other.hasDthb3N) {
    [self setDthb3N:other.dthb3N];
  }
  if (other.hasDthb4N) {
    [self setDthb4N:other.dthb4N];
  }
  if (other.hasDthb5N) {
    [self setDthb5N:other.dthb5N];
  }
  if (other.hasJjjz) {
    [self setJjjz:other.jjjz];
  }
  if (other.hasLjjz) {
    [self setLjjz:other.ljjz];
  }
  if (other.hasJzrq) {
    [self setJzrq:other.jzrq];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Fundfixed_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Fundfixed_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCode:[input readString]];
        break;
      }
      case 18: {
        [self setDthb1N:[input readString]];
        break;
      }
      case 26: {
        [self setDthb2N:[input readString]];
        break;
      }
      case 34: {
        [self setDthb3N:[input readString]];
        break;
      }
      case 42: {
        [self setDthb4N:[input readString]];
        break;
      }
      case 50: {
        [self setDthb5N:[input readString]];
        break;
      }
      case 58: {
        [self setJjjz:[input readString]];
        break;
      }
      case 66: {
        [self setLjjz:[input readString]];
        break;
      }
      case 74: {
        [self setJzrq:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (Fundfixed_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (Fundfixed_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasDthb1N {
  return result.hasDthb1N;
}
- (NSString*) dthb1N {
  return result.dthb1N;
}
- (Fundfixed_Builder*) setDthb1N:(NSString*) value {
  result.hasDthb1N = YES;
  result.dthb1N = value;
  return self;
}
- (Fundfixed_Builder*) clearDthb1N {
  result.hasDthb1N = NO;
  result.dthb1N = @"";
  return self;
}
- (BOOL) hasDthb2N {
  return result.hasDthb2N;
}
- (NSString*) dthb2N {
  return result.dthb2N;
}
- (Fundfixed_Builder*) setDthb2N:(NSString*) value {
  result.hasDthb2N = YES;
  result.dthb2N = value;
  return self;
}
- (Fundfixed_Builder*) clearDthb2N {
  result.hasDthb2N = NO;
  result.dthb2N = @"";
  return self;
}
- (BOOL) hasDthb3N {
  return result.hasDthb3N;
}
- (NSString*) dthb3N {
  return result.dthb3N;
}
- (Fundfixed_Builder*) setDthb3N:(NSString*) value {
  result.hasDthb3N = YES;
  result.dthb3N = value;
  return self;
}
- (Fundfixed_Builder*) clearDthb3N {
  result.hasDthb3N = NO;
  result.dthb3N = @"";
  return self;
}
- (BOOL) hasDthb4N {
  return result.hasDthb4N;
}
- (NSString*) dthb4N {
  return result.dthb4N;
}
- (Fundfixed_Builder*) setDthb4N:(NSString*) value {
  result.hasDthb4N = YES;
  result.dthb4N = value;
  return self;
}
- (Fundfixed_Builder*) clearDthb4N {
  result.hasDthb4N = NO;
  result.dthb4N = @"";
  return self;
}
- (BOOL) hasDthb5N {
  return result.hasDthb5N;
}
- (NSString*) dthb5N {
  return result.dthb5N;
}
- (Fundfixed_Builder*) setDthb5N:(NSString*) value {
  result.hasDthb5N = YES;
  result.dthb5N = value;
  return self;
}
- (Fundfixed_Builder*) clearDthb5N {
  result.hasDthb5N = NO;
  result.dthb5N = @"";
  return self;
}
- (BOOL) hasJjjz {
  return result.hasJjjz;
}
- (NSString*) jjjz {
  return result.jjjz;
}
- (Fundfixed_Builder*) setJjjz:(NSString*) value {
  result.hasJjjz = YES;
  result.jjjz = value;
  return self;
}
- (Fundfixed_Builder*) clearJjjz {
  result.hasJjjz = NO;
  result.jjjz = @"";
  return self;
}
- (BOOL) hasLjjz {
  return result.hasLjjz;
}
- (NSString*) ljjz {
  return result.ljjz;
}
- (Fundfixed_Builder*) setLjjz:(NSString*) value {
  result.hasLjjz = YES;
  result.ljjz = value;
  return self;
}
- (Fundfixed_Builder*) clearLjjz {
  result.hasLjjz = NO;
  result.ljjz = @"";
  return self;
}
- (BOOL) hasJzrq {
  return result.hasJzrq;
}
- (NSString*) jzrq {
  return result.jzrq;
}
- (Fundfixed_Builder*) setJzrq:(NSString*) value {
  result.hasJzrq = YES;
  result.jzrq = value;
  return self;
}
- (Fundfixed_Builder*) clearJzrq {
  result.hasJzrq = NO;
  result.jzrq = @"";
  return self;
}
@end

@interface FundFixedUpdate ()
@property (retain) Common* common;
@property int32_t sumPage;
@property (retain) NSMutableArray* mutableFundfixedList;
@end

@implementation FundFixedUpdate

- (BOOL) hasCommon {
  return !!hasCommon_;
}
- (void) setHasCommon:(BOOL) value {
  hasCommon_ = !!value;
}
@synthesize common;
- (BOOL) hasSumPage {
  return !!hasSumPage_;
}
- (void) setHasSumPage:(BOOL) value {
  hasSumPage_ = !!value;
}
@synthesize sumPage;
@synthesize mutableFundfixedList;
- (void) dealloc {
  self.common = nil;
  self.mutableFundfixedList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.common = [Common defaultInstance];
    self.sumPage = 0;
  }
  return self;
}
static FundFixedUpdate* defaultFundFixedUpdateInstance = nil;
+ (void) initialize {
  if (self == [FundFixedUpdate class]) {
    defaultFundFixedUpdateInstance = [[FundFixedUpdate alloc] init];
  }
}
+ (FundFixedUpdate*) defaultInstance {
  return defaultFundFixedUpdateInstance;
}
- (FundFixedUpdate*) defaultInstance {
  return defaultFundFixedUpdateInstance;
}
- (NSArray*) fundfixedList {
  return mutableFundfixedList;
}
- (Fundfixed*) fundfixedAtIndex:(int32_t) index {
  id value = [mutableFundfixedList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommon) {
    [output writeMessage:1 value:self.common];
  }
  if (self.hasSumPage) {
    [output writeInt32:2 value:self.sumPage];
  }
  for (Fundfixed* element in self.fundfixedList) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCommon) {
    size += computeMessageSize(1, self.common);
  }
  if (self.hasSumPage) {
    size += computeInt32Size(2, self.sumPage);
  }
  for (Fundfixed* element in self.fundfixedList) {
    size += computeMessageSize(3, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FundFixedUpdate*) parseFromData:(NSData*) data {
  return (FundFixedUpdate*)[[[FundFixedUpdate builder] mergeFromData:data] build];
}
+ (FundFixedUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundFixedUpdate*)[[[FundFixedUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FundFixedUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (FundFixedUpdate*)[[[FundFixedUpdate builder] mergeFromInputStream:input] build];
}
+ (FundFixedUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundFixedUpdate*)[[[FundFixedUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FundFixedUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FundFixedUpdate*)[[[FundFixedUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (FundFixedUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundFixedUpdate*)[[[FundFixedUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FundFixedUpdate_Builder*) builder {
  return [[[FundFixedUpdate_Builder alloc] init] autorelease];
}
+ (FundFixedUpdate_Builder*) builderWithPrototype:(FundFixedUpdate*) prototype {
  return [[FundFixedUpdate builder] mergeFrom:prototype];
}
- (FundFixedUpdate_Builder*) builder {
  return [FundFixedUpdate builder];
}
@end

@interface FundFixedUpdate_Builder()
@property (retain) FundFixedUpdate* result;
@end

@implementation FundFixedUpdate_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FundFixedUpdate alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FundFixedUpdate_Builder*) clear {
  self.result = [[[FundFixedUpdate alloc] init] autorelease];
  return self;
}
- (FundFixedUpdate_Builder*) clone {
  return [FundFixedUpdate builderWithPrototype:result];
}
- (FundFixedUpdate*) defaultInstance {
  return [FundFixedUpdate defaultInstance];
}
- (FundFixedUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FundFixedUpdate*) buildPartial {
  FundFixedUpdate* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FundFixedUpdate_Builder*) mergeFrom:(FundFixedUpdate*) other {
  if (other == [FundFixedUpdate defaultInstance]) {
    return self;
  }
  if (other.hasCommon) {
    [self mergeCommon:other.common];
  }
  if (other.hasSumPage) {
    [self setSumPage:other.sumPage];
  }
  if (other.mutableFundfixedList.count > 0) {
    if (result.mutableFundfixedList == nil) {
      result.mutableFundfixedList = [NSMutableArray array];
    }
    [result.mutableFundfixedList addObjectsFromArray:other.mutableFundfixedList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FundFixedUpdate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FundFixedUpdate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Common_Builder* subBuilder = [Common builder];
        if (self.hasCommon) {
          [subBuilder mergeFrom:self.common];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCommon:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setSumPage:[input readInt32]];
        break;
      }
      case 26: {
        Fundfixed_Builder* subBuilder = [Fundfixed builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFundfixed:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCommon {
  return result.hasCommon;
}
- (Common*) common {
  return result.common;
}
- (FundFixedUpdate_Builder*) setCommon:(Common*) value {
  result.hasCommon = YES;
  result.common = value;
  return self;
}
- (FundFixedUpdate_Builder*) setCommonBuilder:(Common_Builder*) builderForValue {
  return [self setCommon:[builderForValue build]];
}
- (FundFixedUpdate_Builder*) mergeCommon:(Common*) value {
  if (result.hasCommon &&
      result.common != [Common defaultInstance]) {
    result.common =
      [[[Common builderWithPrototype:result.common] mergeFrom:value] buildPartial];
  } else {
    result.common = value;
  }
  result.hasCommon = YES;
  return self;
}
- (FundFixedUpdate_Builder*) clearCommon {
  result.hasCommon = NO;
  result.common = [Common defaultInstance];
  return self;
}
- (BOOL) hasSumPage {
  return result.hasSumPage;
}
- (int32_t) sumPage {
  return result.sumPage;
}
- (FundFixedUpdate_Builder*) setSumPage:(int32_t) value {
  result.hasSumPage = YES;
  result.sumPage = value;
  return self;
}
- (FundFixedUpdate_Builder*) clearSumPage {
  result.hasSumPage = NO;
  result.sumPage = 0;
  return self;
}
- (NSArray*) fundfixedList {
  if (result.mutableFundfixedList == nil) { return [NSArray array]; }
  return result.mutableFundfixedList;
}
- (Fundfixed*) fundfixedAtIndex:(int32_t) index {
  return [result fundfixedAtIndex:index];
}
- (FundFixedUpdate_Builder*) replaceFundfixedAtIndex:(int32_t) index with:(Fundfixed*) value {
  [result.mutableFundfixedList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FundFixedUpdate_Builder*) addAllFundfixed:(NSArray*) values {
  if (result.mutableFundfixedList == nil) {
    result.mutableFundfixedList = [NSMutableArray array];
  }
  [result.mutableFundfixedList addObjectsFromArray:values];
  return self;
}
- (FundFixedUpdate_Builder*) clearFundfixedList {
  result.mutableFundfixedList = nil;
  return self;
}
- (FundFixedUpdate_Builder*) addFundfixed:(Fundfixed*) value {
  if (result.mutableFundfixedList == nil) {
    result.mutableFundfixedList = [NSMutableArray array];
  }
  [result.mutableFundfixedList addObject:value];
  return self;
}
@end

