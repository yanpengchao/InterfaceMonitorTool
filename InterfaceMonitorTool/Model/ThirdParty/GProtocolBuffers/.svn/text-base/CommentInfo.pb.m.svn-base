// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "CommentInfo.pb.h"

@implementation CommentInfoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CommentInfoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CommentInfo ()
@property (retain) NSString* commentId;
@property (retain) NSString* userName;
@property (retain) NSString* comments;
@property (retain) NSString* postTime;
@property (retain) NSString* refUserName;
@property (retain) NSString* refComments;
@end

@implementation CommentInfo

- (BOOL) hasCommentId {
  return !!hasCommentId_;
}
- (void) setHasCommentId:(BOOL) value {
  hasCommentId_ = !!value;
}
@synthesize commentId;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) value {
  hasUserName_ = !!value;
}
@synthesize userName;
- (BOOL) hasComments {
  return !!hasComments_;
}
- (void) setHasComments:(BOOL) value {
  hasComments_ = !!value;
}
@synthesize comments;
- (BOOL) hasPostTime {
  return !!hasPostTime_;
}
- (void) setHasPostTime:(BOOL) value {
  hasPostTime_ = !!value;
}
@synthesize postTime;
- (BOOL) hasRefUserName {
  return !!hasRefUserName_;
}
- (void) setHasRefUserName:(BOOL) value {
  hasRefUserName_ = !!value;
}
@synthesize refUserName;
- (BOOL) hasRefComments {
  return !!hasRefComments_;
}
- (void) setHasRefComments:(BOOL) value {
  hasRefComments_ = !!value;
}
@synthesize refComments;
- (void) dealloc {
  self.commentId = nil;
  self.userName = nil;
  self.comments = nil;
  self.postTime = nil;
  self.refUserName = nil;
  self.refComments = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.commentId = @"";
    self.userName = @"";
    self.comments = @"";
    self.postTime = @"";
    self.refUserName = @"";
    self.refComments = @"";
  }
  return self;
}
static CommentInfo* defaultCommentInfoInstance = nil;
+ (void) initialize {
  if (self == [CommentInfo class]) {
    defaultCommentInfoInstance = [[CommentInfo alloc] init];
  }
}
+ (CommentInfo*) defaultInstance {
  return defaultCommentInfoInstance;
}
- (CommentInfo*) defaultInstance {
  return defaultCommentInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommentId) {
    [output writeString:1 value:self.commentId];
  }
  if (self.hasUserName) {
    [output writeString:2 value:self.userName];
  }
  if (self.hasComments) {
    [output writeString:3 value:self.comments];
  }
  if (self.hasPostTime) {
    [output writeString:4 value:self.postTime];
  }
  if (self.hasRefUserName) {
    [output writeString:5 value:self.refUserName];
  }
  if (self.hasRefComments) {
    [output writeString:6 value:self.refComments];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCommentId) {
    size += computeStringSize(1, self.commentId);
  }
  if (self.hasUserName) {
    size += computeStringSize(2, self.userName);
  }
  if (self.hasComments) {
    size += computeStringSize(3, self.comments);
  }
  if (self.hasPostTime) {
    size += computeStringSize(4, self.postTime);
  }
  if (self.hasRefUserName) {
    size += computeStringSize(5, self.refUserName);
  }
  if (self.hasRefComments) {
    size += computeStringSize(6, self.refComments);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CommentInfo*) parseFromData:(NSData*) data {
  return (CommentInfo*)[[[CommentInfo builder] mergeFromData:data] build];
}
+ (CommentInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommentInfo*)[[[CommentInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CommentInfo*) parseFromInputStream:(NSInputStream*) input {
  return (CommentInfo*)[[[CommentInfo builder] mergeFromInputStream:input] build];
}
+ (CommentInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommentInfo*)[[[CommentInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CommentInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CommentInfo*)[[[CommentInfo builder] mergeFromCodedInputStream:input] build];
}
+ (CommentInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommentInfo*)[[[CommentInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CommentInfo_Builder*) builder {
  return [[[CommentInfo_Builder alloc] init] autorelease];
}
+ (CommentInfo_Builder*) builderWithPrototype:(CommentInfo*) prototype {
  return [[CommentInfo builder] mergeFrom:prototype];
}
- (CommentInfo_Builder*) builder {
  return [CommentInfo builder];
}
@end

@interface CommentInfo_Builder()
@property (retain) CommentInfo* result;
@end

@implementation CommentInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CommentInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CommentInfo_Builder*) clear {
  self.result = [[[CommentInfo alloc] init] autorelease];
  return self;
}
- (CommentInfo_Builder*) clone {
  return [CommentInfo builderWithPrototype:result];
}
- (CommentInfo*) defaultInstance {
  return [CommentInfo defaultInstance];
}
- (CommentInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CommentInfo*) buildPartial {
  CommentInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CommentInfo_Builder*) mergeFrom:(CommentInfo*) other {
  if (other == [CommentInfo defaultInstance]) {
    return self;
  }
  if (other.hasCommentId) {
    [self setCommentId:other.commentId];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasComments) {
    [self setComments:other.comments];
  }
  if (other.hasPostTime) {
    [self setPostTime:other.postTime];
  }
  if (other.hasRefUserName) {
    [self setRefUserName:other.refUserName];
  }
  if (other.hasRefComments) {
    [self setRefComments:other.refComments];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CommentInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CommentInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCommentId:[input readString]];
        break;
      }
      case 18: {
        [self setUserName:[input readString]];
        break;
      }
      case 26: {
        [self setComments:[input readString]];
        break;
      }
      case 34: {
        [self setPostTime:[input readString]];
        break;
      }
      case 42: {
        [self setRefUserName:[input readString]];
        break;
      }
      case 50: {
        [self setRefComments:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCommentId {
  return result.hasCommentId;
}
- (NSString*) commentId {
  return result.commentId;
}
- (CommentInfo_Builder*) setCommentId:(NSString*) value {
  result.hasCommentId = YES;
  result.commentId = value;
  return self;
}
- (CommentInfo_Builder*) clearCommentId {
  result.hasCommentId = NO;
  result.commentId = @"";
  return self;
}
- (BOOL) hasUserName {
  return result.hasUserName;
}
- (NSString*) userName {
  return result.userName;
}
- (CommentInfo_Builder*) setUserName:(NSString*) value {
  result.hasUserName = YES;
  result.userName = value;
  return self;
}
- (CommentInfo_Builder*) clearUserName {
  result.hasUserName = NO;
  result.userName = @"";
  return self;
}
- (BOOL) hasComments {
  return result.hasComments;
}
- (NSString*) comments {
  return result.comments;
}
- (CommentInfo_Builder*) setComments:(NSString*) value {
  result.hasComments = YES;
  result.comments = value;
  return self;
}
- (CommentInfo_Builder*) clearComments {
  result.hasComments = NO;
  result.comments = @"";
  return self;
}
- (BOOL) hasPostTime {
  return result.hasPostTime;
}
- (NSString*) postTime {
  return result.postTime;
}
- (CommentInfo_Builder*) setPostTime:(NSString*) value {
  result.hasPostTime = YES;
  result.postTime = value;
  return self;
}
- (CommentInfo_Builder*) clearPostTime {
  result.hasPostTime = NO;
  result.postTime = @"";
  return self;
}
- (BOOL) hasRefUserName {
  return result.hasRefUserName;
}
- (NSString*) refUserName {
  return result.refUserName;
}
- (CommentInfo_Builder*) setRefUserName:(NSString*) value {
  result.hasRefUserName = YES;
  result.refUserName = value;
  return self;
}
- (CommentInfo_Builder*) clearRefUserName {
  result.hasRefUserName = NO;
  result.refUserName = @"";
  return self;
}
- (BOOL) hasRefComments {
  return result.hasRefComments;
}
- (NSString*) refComments {
  return result.refComments;
}
- (CommentInfo_Builder*) setRefComments:(NSString*) value {
  result.hasRefComments = YES;
  result.refComments = value;
  return self;
}
- (CommentInfo_Builder*) clearRefComments {
  result.hasRefComments = NO;
  result.refComments = @"";
  return self;
}
@end

