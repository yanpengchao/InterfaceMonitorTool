// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "CompanyInfo.pb.h"

@implementation CompanyInfoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CompanyInfoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [OpinionRoot registerAllExtensions:registry];
    [FundInfoRoot registerAllExtensions:registry];
    [CommonRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CompanyInfo ()
@property (retain) Common* common;
@property (retain) NSString* jgmc;
@property (retain) NSString* zzxs;
@property Float64 zczb;
@property (retain) NSString* clrq;
@property (retain) NSString* clnx;
@property int32_t jjsl;
@property int32_t jlsl;
@property (retain) NSString* gsyg;
@property (retain) NSMutableArray* mutableFundInfoList;
@property (retain) NSMutableArray* mutableOpinionList;
@end

@implementation CompanyInfo

- (BOOL) hasCommon {
  return !!hasCommon_;
}
- (void) setHasCommon:(BOOL) value {
  hasCommon_ = !!value;
}
@synthesize common;
- (BOOL) hasJgmc {
  return !!hasJgmc_;
}
- (void) setHasJgmc:(BOOL) value {
  hasJgmc_ = !!value;
}
@synthesize jgmc;
- (BOOL) hasZzxs {
  return !!hasZzxs_;
}
- (void) setHasZzxs:(BOOL) value {
  hasZzxs_ = !!value;
}
@synthesize zzxs;
- (BOOL) hasZczb {
  return !!hasZczb_;
}
- (void) setHasZczb:(BOOL) value {
  hasZczb_ = !!value;
}
@synthesize zczb;
- (BOOL) hasClrq {
  return !!hasClrq_;
}
- (void) setHasClrq:(BOOL) value {
  hasClrq_ = !!value;
}
@synthesize clrq;
- (BOOL) hasClnx {
  return !!hasClnx_;
}
- (void) setHasClnx:(BOOL) value {
  hasClnx_ = !!value;
}
@synthesize clnx;
- (BOOL) hasJjsl {
  return !!hasJjsl_;
}
- (void) setHasJjsl:(BOOL) value {
  hasJjsl_ = !!value;
}
@synthesize jjsl;
- (BOOL) hasJlsl {
  return !!hasJlsl_;
}
- (void) setHasJlsl:(BOOL) value {
  hasJlsl_ = !!value;
}
@synthesize jlsl;
- (BOOL) hasGsyg {
  return !!hasGsyg_;
}
- (void) setHasGsyg:(BOOL) value {
  hasGsyg_ = !!value;
}
@synthesize gsyg;
@synthesize mutableFundInfoList;
@synthesize mutableOpinionList;
- (void) dealloc {
  self.common = nil;
  self.jgmc = nil;
  self.zzxs = nil;
  self.clrq = nil;
  self.clnx = nil;
  self.gsyg = nil;
  self.mutableFundInfoList = nil;
  self.mutableOpinionList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.common = [Common defaultInstance];
    self.jgmc = @"";
    self.zzxs = @"";
    self.zczb = 0;
    self.clrq = @"";
    self.clnx = @"";
    self.jjsl = 0;
    self.jlsl = 0;
    self.gsyg = @"";
  }
  return self;
}
static CompanyInfo* defaultCompanyInfoInstance = nil;
+ (void) initialize {
  if (self == [CompanyInfo class]) {
    defaultCompanyInfoInstance = [[CompanyInfo alloc] init];
  }
}
+ (CompanyInfo*) defaultInstance {
  return defaultCompanyInfoInstance;
}
- (CompanyInfo*) defaultInstance {
  return defaultCompanyInfoInstance;
}
- (NSArray*) fundInfoList {
  return mutableFundInfoList;
}
- (FundInfo*) fundInfoAtIndex:(int32_t) index {
  id value = [mutableFundInfoList objectAtIndex:index];
  return value;
}
- (NSArray*) opinionList {
  return mutableOpinionList;
}
- (Opinion*) opinionAtIndex:(int32_t) index {
  id value = [mutableOpinionList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommon) {
    [output writeMessage:1 value:self.common];
  }
  if (self.hasJgmc) {
    [output writeString:2 value:self.jgmc];
  }
  if (self.hasZzxs) {
    [output writeString:3 value:self.zzxs];
  }
  if (self.hasZczb) {
    [output writeDouble:4 value:self.zczb];
  }
  if (self.hasClrq) {
    [output writeString:5 value:self.clrq];
  }
  if (self.hasClnx) {
    [output writeString:6 value:self.clnx];
  }
  if (self.hasJjsl) {
    [output writeSInt32:7 value:self.jjsl];
  }
  if (self.hasJlsl) {
    [output writeSInt32:8 value:self.jlsl];
  }
  if (self.hasGsyg) {
    [output writeString:9 value:self.gsyg];
  }
  for (FundInfo* element in self.fundInfoList) {
    [output writeMessage:10 value:element];
  }
  for (Opinion* element in self.opinionList) {
    [output writeMessage:11 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCommon) {
    size += computeMessageSize(1, self.common);
  }
  if (self.hasJgmc) {
    size += computeStringSize(2, self.jgmc);
  }
  if (self.hasZzxs) {
    size += computeStringSize(3, self.zzxs);
  }
  if (self.hasZczb) {
    size += computeDoubleSize(4, self.zczb);
  }
  if (self.hasClrq) {
    size += computeStringSize(5, self.clrq);
  }
  if (self.hasClnx) {
    size += computeStringSize(6, self.clnx);
  }
  if (self.hasJjsl) {
    size += computeSInt32Size(7, self.jjsl);
  }
  if (self.hasJlsl) {
    size += computeSInt32Size(8, self.jlsl);
  }
  if (self.hasGsyg) {
    size += computeStringSize(9, self.gsyg);
  }
  for (FundInfo* element in self.fundInfoList) {
    size += computeMessageSize(10, element);
  }
  for (Opinion* element in self.opinionList) {
    size += computeMessageSize(11, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CompanyInfo*) parseFromData:(NSData*) data {
  return (CompanyInfo*)[[[CompanyInfo builder] mergeFromData:data] build];
}
+ (CompanyInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompanyInfo*)[[[CompanyInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CompanyInfo*) parseFromInputStream:(NSInputStream*) input {
  return (CompanyInfo*)[[[CompanyInfo builder] mergeFromInputStream:input] build];
}
+ (CompanyInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompanyInfo*)[[[CompanyInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompanyInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CompanyInfo*)[[[CompanyInfo builder] mergeFromCodedInputStream:input] build];
}
+ (CompanyInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompanyInfo*)[[[CompanyInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompanyInfo_Builder*) builder {
  return [[[CompanyInfo_Builder alloc] init] autorelease];
}
+ (CompanyInfo_Builder*) builderWithPrototype:(CompanyInfo*) prototype {
  return [[CompanyInfo builder] mergeFrom:prototype];
}
- (CompanyInfo_Builder*) builder {
  return [CompanyInfo builder];
}
@end

@interface CompanyInfo_Builder()
@property (retain) CompanyInfo* result;
@end

@implementation CompanyInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CompanyInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CompanyInfo_Builder*) clear {
  self.result = [[[CompanyInfo alloc] init] autorelease];
  return self;
}
- (CompanyInfo_Builder*) clone {
  return [CompanyInfo builderWithPrototype:result];
}
- (CompanyInfo*) defaultInstance {
  return [CompanyInfo defaultInstance];
}
- (CompanyInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CompanyInfo*) buildPartial {
  CompanyInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CompanyInfo_Builder*) mergeFrom:(CompanyInfo*) other {
  if (other == [CompanyInfo defaultInstance]) {
    return self;
  }
  if (other.hasCommon) {
    [self mergeCommon:other.common];
  }
  if (other.hasJgmc) {
    [self setJgmc:other.jgmc];
  }
  if (other.hasZzxs) {
    [self setZzxs:other.zzxs];
  }
  if (other.hasZczb) {
    [self setZczb:other.zczb];
  }
  if (other.hasClrq) {
    [self setClrq:other.clrq];
  }
  if (other.hasClnx) {
    [self setClnx:other.clnx];
  }
  if (other.hasJjsl) {
    [self setJjsl:other.jjsl];
  }
  if (other.hasJlsl) {
    [self setJlsl:other.jlsl];
  }
  if (other.hasGsyg) {
    [self setGsyg:other.gsyg];
  }
  if (other.mutableFundInfoList.count > 0) {
    if (result.mutableFundInfoList == nil) {
      result.mutableFundInfoList = [NSMutableArray array];
    }
    [result.mutableFundInfoList addObjectsFromArray:other.mutableFundInfoList];
  }
  if (other.mutableOpinionList.count > 0) {
    if (result.mutableOpinionList == nil) {
      result.mutableOpinionList = [NSMutableArray array];
    }
    [result.mutableOpinionList addObjectsFromArray:other.mutableOpinionList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CompanyInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CompanyInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Common_Builder* subBuilder = [Common builder];
        if (self.hasCommon) {
          [subBuilder mergeFrom:self.common];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCommon:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setJgmc:[input readString]];
        break;
      }
      case 26: {
        [self setZzxs:[input readString]];
        break;
      }
      case 33: {
        [self setZczb:[input readDouble]];
        break;
      }
      case 42: {
        [self setClrq:[input readString]];
        break;
      }
      case 50: {
        [self setClnx:[input readString]];
        break;
      }
      case 56: {
        [self setJjsl:[input readSInt32]];
        break;
      }
      case 64: {
        [self setJlsl:[input readSInt32]];
        break;
      }
      case 74: {
        [self setGsyg:[input readString]];
        break;
      }
      case 82: {
        FundInfo_Builder* subBuilder = [FundInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFundInfo:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        Opinion_Builder* subBuilder = [Opinion builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOpinion:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCommon {
  return result.hasCommon;
}
- (Common*) common {
  return result.common;
}
- (CompanyInfo_Builder*) setCommon:(Common*) value {
  result.hasCommon = YES;
  result.common = value;
  return self;
}
- (CompanyInfo_Builder*) setCommonBuilder:(Common_Builder*) builderForValue {
  return [self setCommon:[builderForValue build]];
}
- (CompanyInfo_Builder*) mergeCommon:(Common*) value {
  if (result.hasCommon &&
      result.common != [Common defaultInstance]) {
    result.common =
      [[[Common builderWithPrototype:result.common] mergeFrom:value] buildPartial];
  } else {
    result.common = value;
  }
  result.hasCommon = YES;
  return self;
}
- (CompanyInfo_Builder*) clearCommon {
  result.hasCommon = NO;
  result.common = [Common defaultInstance];
  return self;
}
- (BOOL) hasJgmc {
  return result.hasJgmc;
}
- (NSString*) jgmc {
  return result.jgmc;
}
- (CompanyInfo_Builder*) setJgmc:(NSString*) value {
  result.hasJgmc = YES;
  result.jgmc = value;
  return self;
}
- (CompanyInfo_Builder*) clearJgmc {
  result.hasJgmc = NO;
  result.jgmc = @"";
  return self;
}
- (BOOL) hasZzxs {
  return result.hasZzxs;
}
- (NSString*) zzxs {
  return result.zzxs;
}
- (CompanyInfo_Builder*) setZzxs:(NSString*) value {
  result.hasZzxs = YES;
  result.zzxs = value;
  return self;
}
- (CompanyInfo_Builder*) clearZzxs {
  result.hasZzxs = NO;
  result.zzxs = @"";
  return self;
}
- (BOOL) hasZczb {
  return result.hasZczb;
}
- (Float64) zczb {
  return result.zczb;
}
- (CompanyInfo_Builder*) setZczb:(Float64) value {
  result.hasZczb = YES;
  result.zczb = value;
  return self;
}
- (CompanyInfo_Builder*) clearZczb {
  result.hasZczb = NO;
  result.zczb = 0;
  return self;
}
- (BOOL) hasClrq {
  return result.hasClrq;
}
- (NSString*) clrq {
  return result.clrq;
}
- (CompanyInfo_Builder*) setClrq:(NSString*) value {
  result.hasClrq = YES;
  result.clrq = value;
  return self;
}
- (CompanyInfo_Builder*) clearClrq {
  result.hasClrq = NO;
  result.clrq = @"";
  return self;
}
- (BOOL) hasClnx {
  return result.hasClnx;
}
- (NSString*) clnx {
  return result.clnx;
}
- (CompanyInfo_Builder*) setClnx:(NSString*) value {
  result.hasClnx = YES;
  result.clnx = value;
  return self;
}
- (CompanyInfo_Builder*) clearClnx {
  result.hasClnx = NO;
  result.clnx = @"";
  return self;
}
- (BOOL) hasJjsl {
  return result.hasJjsl;
}
- (int32_t) jjsl {
  return result.jjsl;
}
- (CompanyInfo_Builder*) setJjsl:(int32_t) value {
  result.hasJjsl = YES;
  result.jjsl = value;
  return self;
}
- (CompanyInfo_Builder*) clearJjsl {
  result.hasJjsl = NO;
  result.jjsl = 0;
  return self;
}
- (BOOL) hasJlsl {
  return result.hasJlsl;
}
- (int32_t) jlsl {
  return result.jlsl;
}
- (CompanyInfo_Builder*) setJlsl:(int32_t) value {
  result.hasJlsl = YES;
  result.jlsl = value;
  return self;
}
- (CompanyInfo_Builder*) clearJlsl {
  result.hasJlsl = NO;
  result.jlsl = 0;
  return self;
}
- (BOOL) hasGsyg {
  return result.hasGsyg;
}
- (NSString*) gsyg {
  return result.gsyg;
}
- (CompanyInfo_Builder*) setGsyg:(NSString*) value {
  result.hasGsyg = YES;
  result.gsyg = value;
  return self;
}
- (CompanyInfo_Builder*) clearGsyg {
  result.hasGsyg = NO;
  result.gsyg = @"";
  return self;
}
- (NSArray*) fundInfoList {
  if (result.mutableFundInfoList == nil) { return [NSArray array]; }
  return result.mutableFundInfoList;
}
- (FundInfo*) fundInfoAtIndex:(int32_t) index {
  return [result fundInfoAtIndex:index];
}
- (CompanyInfo_Builder*) replaceFundInfoAtIndex:(int32_t) index with:(FundInfo*) value {
  [result.mutableFundInfoList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CompanyInfo_Builder*) addAllFundInfo:(NSArray*) values {
  if (result.mutableFundInfoList == nil) {
    result.mutableFundInfoList = [NSMutableArray array];
  }
  [result.mutableFundInfoList addObjectsFromArray:values];
  return self;
}
- (CompanyInfo_Builder*) clearFundInfoList {
  result.mutableFundInfoList = nil;
  return self;
}
- (CompanyInfo_Builder*) addFundInfo:(FundInfo*) value {
  if (result.mutableFundInfoList == nil) {
    result.mutableFundInfoList = [NSMutableArray array];
  }
  [result.mutableFundInfoList addObject:value];
  return self;
}
- (NSArray*) opinionList {
  if (result.mutableOpinionList == nil) { return [NSArray array]; }
  return result.mutableOpinionList;
}
- (Opinion*) opinionAtIndex:(int32_t) index {
  return [result opinionAtIndex:index];
}
- (CompanyInfo_Builder*) replaceOpinionAtIndex:(int32_t) index with:(Opinion*) value {
  [result.mutableOpinionList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CompanyInfo_Builder*) addAllOpinion:(NSArray*) values {
  if (result.mutableOpinionList == nil) {
    result.mutableOpinionList = [NSMutableArray array];
  }
  [result.mutableOpinionList addObjectsFromArray:values];
  return self;
}
- (CompanyInfo_Builder*) clearOpinionList {
  result.mutableOpinionList = nil;
  return self;
}
- (CompanyInfo_Builder*) addOpinion:(Opinion*) value {
  if (result.mutableOpinionList == nil) {
    result.mutableOpinionList = [NSMutableArray array];
  }
  [result.mutableOpinionList addObject:value];
  return self;
}
@end

