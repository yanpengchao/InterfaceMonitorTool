// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "OpinionInfo.pb.h"

@implementation OpinionInfoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [OpinionInfoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [OpinionRoot registerAllExtensions:registry];
    [CommonRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface OpinionInfo ()
@property (retain) Common* common;
@property int32_t totalNum;
@property (retain) NSMutableArray* mutableOpinionList;
@end

@implementation OpinionInfo

- (BOOL) hasCommon {
  return !!hasCommon_;
}
- (void) setHasCommon:(BOOL) value {
  hasCommon_ = !!value;
}
@synthesize common;
- (BOOL) hasTotalNum {
  return !!hasTotalNum_;
}
- (void) setHasTotalNum:(BOOL) value {
  hasTotalNum_ = !!value;
}
@synthesize totalNum;
@synthesize mutableOpinionList;
- (void) dealloc {
  self.common = nil;
  self.mutableOpinionList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.common = [Common defaultInstance];
    self.totalNum = 0;
  }
  return self;
}
static OpinionInfo* defaultOpinionInfoInstance = nil;
+ (void) initialize {
  if (self == [OpinionInfo class]) {
    defaultOpinionInfoInstance = [[OpinionInfo alloc] init];
  }
}
+ (OpinionInfo*) defaultInstance {
  return defaultOpinionInfoInstance;
}
- (OpinionInfo*) defaultInstance {
  return defaultOpinionInfoInstance;
}
- (NSArray*) opinionList {
  return mutableOpinionList;
}
- (Opinion*) opinionAtIndex:(int32_t) index {
  id value = [mutableOpinionList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasTotalNum) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommon) {
    [output writeMessage:1 value:self.common];
  }
  if (self.hasTotalNum) {
    [output writeSInt32:2 value:self.totalNum];
  }
  for (Opinion* element in self.opinionList) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCommon) {
    size += computeMessageSize(1, self.common);
  }
  if (self.hasTotalNum) {
    size += computeSInt32Size(2, self.totalNum);
  }
  for (Opinion* element in self.opinionList) {
    size += computeMessageSize(3, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OpinionInfo*) parseFromData:(NSData*) data {
  return (OpinionInfo*)[[[OpinionInfo builder] mergeFromData:data] build];
}
+ (OpinionInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpinionInfo*)[[[OpinionInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OpinionInfo*) parseFromInputStream:(NSInputStream*) input {
  return (OpinionInfo*)[[[OpinionInfo builder] mergeFromInputStream:input] build];
}
+ (OpinionInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpinionInfo*)[[[OpinionInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OpinionInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OpinionInfo*)[[[OpinionInfo builder] mergeFromCodedInputStream:input] build];
}
+ (OpinionInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpinionInfo*)[[[OpinionInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OpinionInfo_Builder*) builder {
  return [[[OpinionInfo_Builder alloc] init] autorelease];
}
+ (OpinionInfo_Builder*) builderWithPrototype:(OpinionInfo*) prototype {
  return [[OpinionInfo builder] mergeFrom:prototype];
}
- (OpinionInfo_Builder*) builder {
  return [OpinionInfo builder];
}
@end

@interface OpinionInfo_Builder()
@property (retain) OpinionInfo* result;
@end

@implementation OpinionInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[OpinionInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OpinionInfo_Builder*) clear {
  self.result = [[[OpinionInfo alloc] init] autorelease];
  return self;
}
- (OpinionInfo_Builder*) clone {
  return [OpinionInfo builderWithPrototype:result];
}
- (OpinionInfo*) defaultInstance {
  return [OpinionInfo defaultInstance];
}
- (OpinionInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OpinionInfo*) buildPartial {
  OpinionInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (OpinionInfo_Builder*) mergeFrom:(OpinionInfo*) other {
  if (other == [OpinionInfo defaultInstance]) {
    return self;
  }
  if (other.hasCommon) {
    [self mergeCommon:other.common];
  }
  if (other.hasTotalNum) {
    [self setTotalNum:other.totalNum];
  }
  if (other.mutableOpinionList.count > 0) {
    if (result.mutableOpinionList == nil) {
      result.mutableOpinionList = [NSMutableArray array];
    }
    [result.mutableOpinionList addObjectsFromArray:other.mutableOpinionList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OpinionInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OpinionInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Common_Builder* subBuilder = [Common builder];
        if (self.hasCommon) {
          [subBuilder mergeFrom:self.common];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCommon:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setTotalNum:[input readSInt32]];
        break;
      }
      case 26: {
        Opinion_Builder* subBuilder = [Opinion builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOpinion:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCommon {
  return result.hasCommon;
}
- (Common*) common {
  return result.common;
}
- (OpinionInfo_Builder*) setCommon:(Common*) value {
  result.hasCommon = YES;
  result.common = value;
  return self;
}
- (OpinionInfo_Builder*) setCommonBuilder:(Common_Builder*) builderForValue {
  return [self setCommon:[builderForValue build]];
}
- (OpinionInfo_Builder*) mergeCommon:(Common*) value {
  if (result.hasCommon &&
      result.common != [Common defaultInstance]) {
    result.common =
      [[[Common builderWithPrototype:result.common] mergeFrom:value] buildPartial];
  } else {
    result.common = value;
  }
  result.hasCommon = YES;
  return self;
}
- (OpinionInfo_Builder*) clearCommon {
  result.hasCommon = NO;
  result.common = [Common defaultInstance];
  return self;
}
- (BOOL) hasTotalNum {
  return result.hasTotalNum;
}
- (int32_t) totalNum {
  return result.totalNum;
}
- (OpinionInfo_Builder*) setTotalNum:(int32_t) value {
  result.hasTotalNum = YES;
  result.totalNum = value;
  return self;
}
- (OpinionInfo_Builder*) clearTotalNum {
  result.hasTotalNum = NO;
  result.totalNum = 0;
  return self;
}
- (NSArray*) opinionList {
  if (result.mutableOpinionList == nil) { return [NSArray array]; }
  return result.mutableOpinionList;
}
- (Opinion*) opinionAtIndex:(int32_t) index {
  return [result opinionAtIndex:index];
}
- (OpinionInfo_Builder*) replaceOpinionAtIndex:(int32_t) index with:(Opinion*) value {
  [result.mutableOpinionList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (OpinionInfo_Builder*) addAllOpinion:(NSArray*) values {
  if (result.mutableOpinionList == nil) {
    result.mutableOpinionList = [NSMutableArray array];
  }
  [result.mutableOpinionList addObjectsFromArray:values];
  return self;
}
- (OpinionInfo_Builder*) clearOpinionList {
  result.mutableOpinionList = nil;
  return self;
}
- (OpinionInfo_Builder*) addOpinion:(Opinion*) value {
  if (result.mutableOpinionList == nil) {
    result.mutableOpinionList = [NSMutableArray array];
  }
  [result.mutableOpinionList addObject:value];
  return self;
}
@end

