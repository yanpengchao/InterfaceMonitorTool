// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FundBasicInfo.pb.h"

@implementation FundBasicInfoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FundBasicInfoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FundBasic2Root registerAllExtensions:registry];
    [CommonRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FundBasicInfo ()
@property (retain) Common* common;
@property (retain) NSString* newestFundInfoVer;
@property (retain) NSMutableArray* mutableFundBasicList;
@end

@implementation FundBasicInfo

- (BOOL) hasCommon {
  return !!hasCommon_;
}
- (void) setHasCommon:(BOOL) value {
  hasCommon_ = !!value;
}
@synthesize common;
- (BOOL) hasNewestFundInfoVer {
  return !!hasNewestFundInfoVer_;
}
- (void) setHasNewestFundInfoVer:(BOOL) value {
  hasNewestFundInfoVer_ = !!value;
}
@synthesize newestFundInfoVer;
@synthesize mutableFundBasicList;
- (void) dealloc {
  self.common = nil;
  self.newestFundInfoVer = nil;
  self.mutableFundBasicList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.common = [Common defaultInstance];
    self.newestFundInfoVer = @"";
  }
  return self;
}
static FundBasicInfo* defaultFundBasicInfoInstance = nil;
+ (void) initialize {
  if (self == [FundBasicInfo class]) {
    defaultFundBasicInfoInstance = [[FundBasicInfo alloc] init];
  }
}
+ (FundBasicInfo*) defaultInstance {
  return defaultFundBasicInfoInstance;
}
- (FundBasicInfo*) defaultInstance {
  return defaultFundBasicInfoInstance;
}
- (NSArray*) fundBasicList {
  return mutableFundBasicList;
}
- (FundBasic*) fundBasicAtIndex:(int32_t) index {
  id value = [mutableFundBasicList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommon) {
    [output writeMessage:1 value:self.common];
  }
  if (self.hasNewestFundInfoVer) {
    [output writeString:2 value:self.newestFundInfoVer];
  }
  for (FundBasic* element in self.fundBasicList) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCommon) {
    size += computeMessageSize(1, self.common);
  }
  if (self.hasNewestFundInfoVer) {
    size += computeStringSize(2, self.newestFundInfoVer);
  }
  for (FundBasic* element in self.fundBasicList) {
    size += computeMessageSize(3, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FundBasicInfo*) parseFromData:(NSData*) data {
  return (FundBasicInfo*)[[[FundBasicInfo builder] mergeFromData:data] build];
}
+ (FundBasicInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundBasicInfo*)[[[FundBasicInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FundBasicInfo*) parseFromInputStream:(NSInputStream*) input {
  return (FundBasicInfo*)[[[FundBasicInfo builder] mergeFromInputStream:input] build];
}
+ (FundBasicInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundBasicInfo*)[[[FundBasicInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FundBasicInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FundBasicInfo*)[[[FundBasicInfo builder] mergeFromCodedInputStream:input] build];
}
+ (FundBasicInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundBasicInfo*)[[[FundBasicInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FundBasicInfo_Builder*) builder {
  return [[[FundBasicInfo_Builder alloc] init] autorelease];
}
+ (FundBasicInfo_Builder*) builderWithPrototype:(FundBasicInfo*) prototype {
  return [[FundBasicInfo builder] mergeFrom:prototype];
}
- (FundBasicInfo_Builder*) builder {
  return [FundBasicInfo builder];
}
@end

@interface FundBasicInfo_Builder()
@property (retain) FundBasicInfo* result;
@end

@implementation FundBasicInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FundBasicInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FundBasicInfo_Builder*) clear {
  self.result = [[[FundBasicInfo alloc] init] autorelease];
  return self;
}
- (FundBasicInfo_Builder*) clone {
  return [FundBasicInfo builderWithPrototype:result];
}
- (FundBasicInfo*) defaultInstance {
  return [FundBasicInfo defaultInstance];
}
- (FundBasicInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FundBasicInfo*) buildPartial {
  FundBasicInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FundBasicInfo_Builder*) mergeFrom:(FundBasicInfo*) other {
  if (other == [FundBasicInfo defaultInstance]) {
    return self;
  }
  if (other.hasCommon) {
    [self mergeCommon:other.common];
  }
  if (other.hasNewestFundInfoVer) {
    [self setNewestFundInfoVer:other.newestFundInfoVer];
  }
  if (other.mutableFundBasicList.count > 0) {
    if (result.mutableFundBasicList == nil) {
      result.mutableFundBasicList = [NSMutableArray array];
    }
    [result.mutableFundBasicList addObjectsFromArray:other.mutableFundBasicList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FundBasicInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FundBasicInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Common_Builder* subBuilder = [Common builder];
        if (self.hasCommon) {
          [subBuilder mergeFrom:self.common];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCommon:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setNewestFundInfoVer:[input readString]];
        break;
      }
      case 26: {
        FundBasic_Builder* subBuilder = [FundBasic builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFundBasic:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCommon {
  return result.hasCommon;
}
- (Common*) common {
  return result.common;
}
- (FundBasicInfo_Builder*) setCommon:(Common*) value {
  result.hasCommon = YES;
  result.common = value;
  return self;
}
- (FundBasicInfo_Builder*) setCommonBuilder:(Common_Builder*) builderForValue {
  return [self setCommon:[builderForValue build]];
}
- (FundBasicInfo_Builder*) mergeCommon:(Common*) value {
  if (result.hasCommon &&
      result.common != [Common defaultInstance]) {
    result.common =
      [[[Common builderWithPrototype:result.common] mergeFrom:value] buildPartial];
  } else {
    result.common = value;
  }
  result.hasCommon = YES;
  return self;
}
- (FundBasicInfo_Builder*) clearCommon {
  result.hasCommon = NO;
  result.common = [Common defaultInstance];
  return self;
}
- (BOOL) hasNewestFundInfoVer {
  return result.hasNewestFundInfoVer;
}
- (NSString*) newestFundInfoVer {
  return result.newestFundInfoVer;
}
- (FundBasicInfo_Builder*) setNewestFundInfoVer:(NSString*) value {
  result.hasNewestFundInfoVer = YES;
  result.newestFundInfoVer = value;
  return self;
}
- (FundBasicInfo_Builder*) clearNewestFundInfoVer {
  result.hasNewestFundInfoVer = NO;
  result.newestFundInfoVer = @"";
  return self;
}
- (NSArray*) fundBasicList {
  if (result.mutableFundBasicList == nil) { return [NSArray array]; }
  return result.mutableFundBasicList;
}
- (FundBasic*) fundBasicAtIndex:(int32_t) index {
  return [result fundBasicAtIndex:index];
}
- (FundBasicInfo_Builder*) replaceFundBasicAtIndex:(int32_t) index with:(FundBasic*) value {
  [result.mutableFundBasicList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FundBasicInfo_Builder*) addAllFundBasic:(NSArray*) values {
  if (result.mutableFundBasicList == nil) {
    result.mutableFundBasicList = [NSMutableArray array];
  }
  [result.mutableFundBasicList addObjectsFromArray:values];
  return self;
}
- (FundBasicInfo_Builder*) clearFundBasicList {
  result.mutableFundBasicList = nil;
  return self;
}
- (FundBasicInfo_Builder*) addFundBasic:(FundBasic*) value {
  if (result.mutableFundBasicList == nil) {
    result.mutableFundBasicList = [NSMutableArray array];
  }
  [result.mutableFundBasicList addObject:value];
  return self;
}
@end

