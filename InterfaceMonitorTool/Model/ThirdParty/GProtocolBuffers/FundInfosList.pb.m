// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FundInfosList.pb.h"

@implementation FundInfosListRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FundInfosListRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [CommonRoot registerAllExtensions:registry];
    [OpensRoot registerAllExtensions:registry];
    [MoneysRoot registerAllExtensions:registry];
    [ClosesNewRoot registerAllExtensions:registry];
    [SimusRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FundInfosList ()
@property (retain) Common* common;
@property (retain) NSMutableArray* mutableOpensList;
@property (retain) NSMutableArray* mutableMoneysList;
@property (retain) NSMutableArray* mutableClosesNewList;
@property (retain) NSMutableArray* mutableSimusList;
@end

@implementation FundInfosList

- (BOOL) hasCommon {
  return !!hasCommon_;
}
- (void) setHasCommon:(BOOL) value {
  hasCommon_ = !!value;
}
@synthesize common;
@synthesize mutableOpensList;
@synthesize mutableMoneysList;
@synthesize mutableClosesNewList;
@synthesize mutableSimusList;
- (void) dealloc {
  self.common = nil;
  self.mutableOpensList = nil;
  self.mutableMoneysList = nil;
  self.mutableClosesNewList = nil;
  self.mutableSimusList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.common = [Common defaultInstance];
  }
  return self;
}
static FundInfosList* defaultFundInfosListInstance = nil;
+ (void) initialize {
  if (self == [FundInfosList class]) {
    defaultFundInfosListInstance = [[FundInfosList alloc] init];
  }
}
+ (FundInfosList*) defaultInstance {
  return defaultFundInfosListInstance;
}
- (FundInfosList*) defaultInstance {
  return defaultFundInfosListInstance;
}
- (NSArray*) opensList {
  return mutableOpensList;
}
- (Opens*) opensAtIndex:(int32_t) index {
  id value = [mutableOpensList objectAtIndex:index];
  return value;
}
- (NSArray*) moneysList {
  return mutableMoneysList;
}
- (Moneys*) moneysAtIndex:(int32_t) index {
  id value = [mutableMoneysList objectAtIndex:index];
  return value;
}
- (NSArray*) closesNewList {
  return mutableClosesNewList;
}
- (ClosesNew*) closesNewAtIndex:(int32_t) index {
  id value = [mutableClosesNewList objectAtIndex:index];
  return value;
}
- (NSArray*) simusList {
  return mutableSimusList;
}
- (Simus*) simusAtIndex:(int32_t) index {
  id value = [mutableSimusList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommon) {
    [output writeMessage:1 value:self.common];
  }
  for (Opens* element in self.opensList) {
    [output writeMessage:2 value:element];
  }
  for (Moneys* element in self.moneysList) {
    [output writeMessage:3 value:element];
  }
  for (ClosesNew* element in self.closesNewList) {
    [output writeMessage:4 value:element];
  }
  for (Simus* element in self.simusList) {
    [output writeMessage:5 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCommon) {
    size += computeMessageSize(1, self.common);
  }
  for (Opens* element in self.opensList) {
    size += computeMessageSize(2, element);
  }
  for (Moneys* element in self.moneysList) {
    size += computeMessageSize(3, element);
  }
  for (ClosesNew* element in self.closesNewList) {
    size += computeMessageSize(4, element);
  }
  for (Simus* element in self.simusList) {
    size += computeMessageSize(5, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FundInfosList*) parseFromData:(NSData*) data {
  return (FundInfosList*)[[[FundInfosList builder] mergeFromData:data] build];
}
+ (FundInfosList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundInfosList*)[[[FundInfosList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FundInfosList*) parseFromInputStream:(NSInputStream*) input {
  return (FundInfosList*)[[[FundInfosList builder] mergeFromInputStream:input] build];
}
+ (FundInfosList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundInfosList*)[[[FundInfosList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FundInfosList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FundInfosList*)[[[FundInfosList builder] mergeFromCodedInputStream:input] build];
}
+ (FundInfosList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FundInfosList*)[[[FundInfosList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FundInfosList_Builder*) builder {
  return [[[FundInfosList_Builder alloc] init] autorelease];
}
+ (FundInfosList_Builder*) builderWithPrototype:(FundInfosList*) prototype {
  return [[FundInfosList builder] mergeFrom:prototype];
}
- (FundInfosList_Builder*) builder {
  return [FundInfosList builder];
}
@end

@interface FundInfosList_Builder()
@property (retain) FundInfosList* result;
@end

@implementation FundInfosList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FundInfosList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FundInfosList_Builder*) clear {
  self.result = [[[FundInfosList alloc] init] autorelease];
  return self;
}
- (FundInfosList_Builder*) clone {
  return [FundInfosList builderWithPrototype:result];
}
- (FundInfosList*) defaultInstance {
  return [FundInfosList defaultInstance];
}
- (FundInfosList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FundInfosList*) buildPartial {
  FundInfosList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FundInfosList_Builder*) mergeFrom:(FundInfosList*) other {
  if (other == [FundInfosList defaultInstance]) {
    return self;
  }
  if (other.hasCommon) {
    [self mergeCommon:other.common];
  }
  if (other.mutableOpensList.count > 0) {
    if (result.mutableOpensList == nil) {
      result.mutableOpensList = [NSMutableArray array];
    }
    [result.mutableOpensList addObjectsFromArray:other.mutableOpensList];
  }
  if (other.mutableMoneysList.count > 0) {
    if (result.mutableMoneysList == nil) {
      result.mutableMoneysList = [NSMutableArray array];
    }
    [result.mutableMoneysList addObjectsFromArray:other.mutableMoneysList];
  }
  if (other.mutableClosesNewList.count > 0) {
    if (result.mutableClosesNewList == nil) {
      result.mutableClosesNewList = [NSMutableArray array];
    }
    [result.mutableClosesNewList addObjectsFromArray:other.mutableClosesNewList];
  }
  if (other.mutableSimusList.count > 0) {
    if (result.mutableSimusList == nil) {
      result.mutableSimusList = [NSMutableArray array];
    }
    [result.mutableSimusList addObjectsFromArray:other.mutableSimusList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FundInfosList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FundInfosList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Common_Builder* subBuilder = [Common builder];
        if (self.hasCommon) {
          [subBuilder mergeFrom:self.common];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCommon:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        Opens_Builder* subBuilder = [Opens builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOpens:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        Moneys_Builder* subBuilder = [Moneys builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMoneys:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        ClosesNew_Builder* subBuilder = [ClosesNew builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addClosesNew:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        Simus_Builder* subBuilder = [Simus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSimus:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCommon {
  return result.hasCommon;
}
- (Common*) common {
  return result.common;
}
- (FundInfosList_Builder*) setCommon:(Common*) value {
  result.hasCommon = YES;
  result.common = value;
  return self;
}
- (FundInfosList_Builder*) setCommonBuilder:(Common_Builder*) builderForValue {
  return [self setCommon:[builderForValue build]];
}
- (FundInfosList_Builder*) mergeCommon:(Common*) value {
  if (result.hasCommon &&
      result.common != [Common defaultInstance]) {
    result.common =
      [[[Common builderWithPrototype:result.common] mergeFrom:value] buildPartial];
  } else {
    result.common = value;
  }
  result.hasCommon = YES;
  return self;
}
- (FundInfosList_Builder*) clearCommon {
  result.hasCommon = NO;
  result.common = [Common defaultInstance];
  return self;
}
- (NSArray*) opensList {
  if (result.mutableOpensList == nil) { return [NSArray array]; }
  return result.mutableOpensList;
}
- (Opens*) opensAtIndex:(int32_t) index {
  return [result opensAtIndex:index];
}
- (FundInfosList_Builder*) replaceOpensAtIndex:(int32_t) index with:(Opens*) value {
  [result.mutableOpensList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FundInfosList_Builder*) addAllOpens:(NSArray*) values {
  if (result.mutableOpensList == nil) {
    result.mutableOpensList = [NSMutableArray array];
  }
  [result.mutableOpensList addObjectsFromArray:values];
  return self;
}
- (FundInfosList_Builder*) clearOpensList {
  result.mutableOpensList = nil;
  return self;
}
- (FundInfosList_Builder*) addOpens:(Opens*) value {
  if (result.mutableOpensList == nil) {
    result.mutableOpensList = [NSMutableArray array];
  }
  [result.mutableOpensList addObject:value];
  return self;
}
- (NSArray*) moneysList {
  if (result.mutableMoneysList == nil) { return [NSArray array]; }
  return result.mutableMoneysList;
}
- (Moneys*) moneysAtIndex:(int32_t) index {
  return [result moneysAtIndex:index];
}
- (FundInfosList_Builder*) replaceMoneysAtIndex:(int32_t) index with:(Moneys*) value {
  [result.mutableMoneysList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FundInfosList_Builder*) addAllMoneys:(NSArray*) values {
  if (result.mutableMoneysList == nil) {
    result.mutableMoneysList = [NSMutableArray array];
  }
  [result.mutableMoneysList addObjectsFromArray:values];
  return self;
}
- (FundInfosList_Builder*) clearMoneysList {
  result.mutableMoneysList = nil;
  return self;
}
- (FundInfosList_Builder*) addMoneys:(Moneys*) value {
  if (result.mutableMoneysList == nil) {
    result.mutableMoneysList = [NSMutableArray array];
  }
  [result.mutableMoneysList addObject:value];
  return self;
}
- (NSArray*) closesNewList {
  if (result.mutableClosesNewList == nil) { return [NSArray array]; }
  return result.mutableClosesNewList;
}
- (ClosesNew*) closesNewAtIndex:(int32_t) index {
  return [result closesNewAtIndex:index];
}
- (FundInfosList_Builder*) replaceClosesNewAtIndex:(int32_t) index with:(ClosesNew*) value {
  [result.mutableClosesNewList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FundInfosList_Builder*) addAllClosesNew:(NSArray*) values {
  if (result.mutableClosesNewList == nil) {
    result.mutableClosesNewList = [NSMutableArray array];
  }
  [result.mutableClosesNewList addObjectsFromArray:values];
  return self;
}
- (FundInfosList_Builder*) clearClosesNewList {
  result.mutableClosesNewList = nil;
  return self;
}
- (FundInfosList_Builder*) addClosesNew:(ClosesNew*) value {
  if (result.mutableClosesNewList == nil) {
    result.mutableClosesNewList = [NSMutableArray array];
  }
  [result.mutableClosesNewList addObject:value];
  return self;
}
- (NSArray*) simusList {
  if (result.mutableSimusList == nil) { return [NSArray array]; }
  return result.mutableSimusList;
}
- (Simus*) simusAtIndex:(int32_t) index {
  return [result simusAtIndex:index];
}
- (FundInfosList_Builder*) replaceSimusAtIndex:(int32_t) index with:(Simus*) value {
  [result.mutableSimusList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FundInfosList_Builder*) addAllSimus:(NSArray*) values {
  if (result.mutableSimusList == nil) {
    result.mutableSimusList = [NSMutableArray array];
  }
  [result.mutableSimusList addObjectsFromArray:values];
  return self;
}
- (FundInfosList_Builder*) clearSimusList {
  result.mutableSimusList = nil;
  return self;
}
- (FundInfosList_Builder*) addSimus:(Simus*) value {
  if (result.mutableSimusList == nil) {
    result.mutableSimusList = [NSMutableArray array];
  }
  [result.mutableSimusList addObject:value];
  return self;
}
@end

